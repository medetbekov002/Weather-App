package com.example.weatherapp.ui.fragments.locationimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.weatherapp.data.model.RemoteLocationimport com.example.weatherapp.network.repositories.WeatherDataRepositoryimport kotlinx.coroutines.launchclass LocationViewModel(private val weatherDataRepository: WeatherDataRepository): ViewModel() {    private val _searchResult = MutableLiveData<SearchResultDataState>()    val searchResult: LiveData<SearchResultDataState> get() = _searchResult    fun searchLocation(query: String) {        viewModelScope.launch {            emitSearchResultUiState(isloading = true)            val searchResult = weatherDataRepository.searchLocation(query)            if (searchResult.isNullOrEmpty()) {                emitSearchResultUiState(error = "Location not found, please try again")            } else {                emitSearchResultUiState(locations = searchResult)            }        }    }    private fun emitSearchResultUiState(        isloading: Boolean = false,        locations: List<RemoteLocation>? = null,        error: String? = null    ) {        val searchResultDataState = SearchResultDataState(isloading, locations, error)        _searchResult.value = searchResultDataState    }    data class SearchResultDataState(        val isLoading: Boolean,        val locations: List<RemoteLocation>?,        val error: String?    )}